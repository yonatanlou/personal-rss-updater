"""Reminder email content generation."""

from datetime import datetime


class ReminderGenerator:
    """Generates reminder email content for problematic blogs."""

    def create_reminder_html(self, problematic_blogs: dict) -> str:
        """Create HTML content for bi-weekly reminder email."""
        date = datetime.now().strftime("%B %d, %Y")

        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>RSS Monitor - Bi-weekly Reminder</title>
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    max-width: 600px;
                    margin: 0 auto;
                    padding: 20px;
                }}
                .header {{
                    background: #f4f4f4;
                    padding: 20px;
                    text-align: center;
                    border-radius: 5px;
                }}
                .blog {{
                    margin: 15px 0;
                    padding: 15px;
                    border-left: 4px solid #e74c3c;
                    background: #ffeaa7;
                }}
                .blog-name {{
                    font-weight: bold;
                    color: #e74c3c;
                }}
                .blog-details {{
                    margin-top: 5px;
                    font-size: 0.9em;
                    color: #666;
                }}
                .footer {{
                    margin-top: 30px;
                    text-align: center;
                    font-size: 0.8em;
                    color: #666;
                }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>ðŸ”§ RSS Monitor - Bi-weekly Reminder</h1>
                <p>These blogs need attention - {date}</p>
            </div>

            <div class="content">
                <p>The following {len(problematic_blogs)} blogs have been having persistent issues and may need manual review:</p>
        """

        for blog_name, state in problematic_blogs.items():
            days_since_success = (
                "Never" if not state.last_success else (datetime.now() - state.last_success).days
            )

            html += f"""
            <div class="blog">
                <div class="blog-name">ðŸš¨ {blog_name}</div>
                <div class="blog-details">
                    URL: <a href="{state.url}">{state.url}</a><br>
                    Failure Count: {state.failure_count}<br>
                    Days Since Last Success: {days_since_success}<br>
                    Status: {"Marked as Problematic" if state.is_problematic else "Automatic Detection (5+ failures)"}
                </div>
            </div>
            """

        html += """
                <p><strong>Recommended Actions:</strong></p>
                <ul>
                    <li>Check if these blogs still exist and are active</li>
                    <li>Update URLs if blogs have moved</li>
                    <li>Add manual selectors if blog structure changed</li>
                    <li>Consider removing inactive blogs from monitoring</li>
                </ul>

                <p>This reminder is sent every 2 weeks for problematic blogs.</p>
            </div>

            <div class="footer">
                Generated by Personal RSS Updater<br>
                ðŸ¤– Bi-weekly Maintenance Reminder
            </div>
        </body>
        </html>
        """

        return html

    def create_reminder_text(self, problematic_blogs: dict) -> str:
        """Create plain text content for bi-weekly reminder email."""
        date = datetime.now().strftime("%B %d, %Y")

        lines = []
        lines.append("RSS MONITOR - BI-WEEKLY REMINDER")
        lines.append("=" * 40)
        lines.append(f"Date: {date}")
        lines.append(f"Problematic Blogs: {len(problematic_blogs)}")
        lines.append("")
        lines.append("BLOGS NEEDING ATTENTION:")
        lines.append("-" * 40)

        for blog_name, state in problematic_blogs.items():
            days_since_success = (
                "Never" if not state.last_success else (datetime.now() - state.last_success).days
            )

            lines.append(f"ðŸš¨ {blog_name}")
            lines.append(f"   URL: {state.url}")
            lines.append(f"   Failures: {state.failure_count}")
            lines.append(f"   Days Since Success: {days_since_success}")
            lines.append(f"   Status: {'Problematic' if state.is_problematic else 'Auto-detected'}")
            lines.append("")

        lines.append("RECOMMENDED ACTIONS:")
        lines.append("- Check if blogs still exist and are active")
        lines.append("- Update URLs if blogs have moved")
        lines.append("- Add manual selectors if structure changed")
        lines.append("- Consider removing inactive blogs")
        lines.append("")
        lines.append("This reminder is sent every 2 weeks for problematic blogs.")

        return "\\n".join(lines)
